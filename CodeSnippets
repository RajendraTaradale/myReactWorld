
import React, { createContext } from 'react'
import ComB from "./ComB";
const BioData = createContext();
const ComA = () => {
    return (
        <BioData.Provider value={"Thapa Technical Subs"}>
            <ComB />
        </BioData.Provider>
    ) 
}
export default ComA
export { BioData };
 
}

export default ComB
----
import React, {useContext} from 'react'
import { BioData } from "./ComA";

const Comc = ({ name }) => {
    const channelName = useContext(BioData);
    return <h1>Hello ComC  { channelName } </h1>
}

export default 

###########################################################
Pass the Data from A to B component
<link to={{pathname:`/contact/${id}`, state: {data: props.data}}}
###########################################################

import axios from 'axios'

const baseService = axios.create({
  baseURL: 'http://localhost:4060/api/data',
  headers: {
    'Accept': 'application/json',
    'Accept-Language': 'es',
    'Content-Type': 'application/json'
  },
  withCredentials: true
})

baseService.interceptors.response.use(
  function (response) {
    return response.data
  },
  function (error) {
    console.error(error)
  }
)

export default baseService
###########################################################
import { Component } from 'react';

export class ErrorBoundary extends Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }
    static getDerivedStateFromError() {
        console.log('get derived error fired');
        return { hasError: true };
    }

    componentDidCatch(error, info) {
        console.log(error);
        console.log(info);
        console.log('component did catch fired');
    }

    render() {
        if (this.state.hasError) {
            return <div>An Error occured</div>;
        }
        return this.props.children;
    }
}
---
  <ErrorBoundary>
  <App />                     
 </ErrorBoundary>
 
 ###########################################################

import React from 'react';

const UserContext = React.createContext();

export default UserContext;
---
import React from 'react';

const UserProfileContext = React.createContext();

export default UserProfileContext;
---
let userData = {
        name: 'Rajendra Taradale',
        greet: function () {
            return 'Hello ' + this.name;
        },
    };
    
<UserProfileContext.Provider value='Admin'>
<UserContext.Provider value={userData}>
    <App />
</UserContext.Provider>
</ButtonContext.Provider>
---

<div>
 <UserProfileContext.Consumer>
                    {(value) => {
                        return (
                            <div>
                                <a href='#'>{value}</a>
                                <UserContext.Consumer>
                                    {(userValue) => {
                                        return (
                                            <div>{userValue.gret()}</div>
                                        );
                                    }}
                                </UserContext.Consumer>
                            </div>
                        );
                    }}
                </UserProfileContext.Consumer>
            </div>
###########################################################

 <Link to={{  pathname: '/',hash: '#rajendra', search: '?channel=rajendra',   state: { admin: true }, }}  >  React Router  </Link>
 <NavLink to='/posts' activeClassName='text-white'> Posts </NavLink>
 ---
 import { BrowserRouter,  Route, HashRouter,  Switch,  Redirect } from 'react-router-dom';
import { lazy, Suspense } from 'react';

const About = lazy(() =>
    import(/* webpackChunkName: "About" */ './components/About/About'),
);

const Contact = lazy(() =>
    import(
        /* webpackChunkName: "Contact" */ './components/Contact/Contact'
    ),
);
const routeone = lazy(() => import('./components/routeone/routeones'));
const NotFound = lazy(() => import('./components/NotFound/NotFound'));

  <BrowserRouter>
            <Header />
            <div className='container mx-auto'>
                <div>
                    <Suspense fallback={<div>Loading....</div>}>
                        <Switch>
                            {isAuthenticate && (
                                <Route path='/about' component={About} />
                            )}

                            <Route path='/routeone' component={routeone} />
                            <Route path='/routeone' component={routeone} />

                            <Redirect from='/' to='/posts' exact />
                            <Route path='*' component={NotFound} />
                        </Switch>
                    </Suspense>
                </div>
                <Footer />
            </div>
        </BrowserRouter>
---
React Router v4
Using component
---
import { useParams } from 'react-router-dom'
const { handle } = useParams()

 const { userName } = this.props.match.params;
---
<Route path="/users/:id" component={UserPage}/> 
this.props.match.params.id
The component is automatically rendered with the route props.

Using render

<Route path="/users/:id" render={(props) => <UserPage {...props} />}/> 
this.props.match.params.id
Route props are passed to the render function.

---
const query = new URLSearchParams(this.props.location.search);
const token = query.get('token')
console.log(token)//1238999

npm i query-string
import queryString from 'query-string'
const value=queryString.parse(this.props.location.search);
const token=value.token;
console.log('token',token)//rajendr255066
----
import { useHistory } from 'react-router-dom';
const history = useHistory();
const handleClick = () => {
        history.push("/path/to/push");
 }
 ----
 this.props.history.push("/new/url");
----
this will navigate to a new location. The new location will override the current location in the history stack, like server-side redirects (HTTP 3xx) do.
import { Route, Redirect } from 'react-router'

<Route exact path="/" render={() => (
  loggedIn ? (
    <Redirect to="/dashboard"/>
  ) : (
    <MyHomePage/>
  )
)}/>

<Redirect to="/somewhere/else"/>
-----
const userauthentication={
  isLoggedIn:false,
  onAuthentication(){
    this.isLoggedIn=true;
  },
  getUserLogInStatus(){
    return this.isLoggedIn;
  }
}
--
function SecuredPathRoute(props){
  return(
    <Route path={props.path} render={data=>userauthentication.getUserLogInStatus()?(
      <props.component {...data}></props.component>):
      (<Redirect to={{pathname:'/'}}></Redirect>)}></Route>
  )
}

<Switch>
<Route exact path="/" component={LogIn}></Route>
<SecuredPathRoute  path="/data" component={data}></SecuredRoute>
<SecuredPathRoute  path="/datasecret" component={datas}></SecuredRoute>
</Switch>
###########################################################
this.mytextBox=React.createRef();
<input type="text" ref={this.quantityRef}></input>
componentDidMount(){
    this.mytextBox.current.focus();
}

###########################################################
import {createStore} from 'redux';
import {Provider} from 'react-redux';

const employeePersonalData={
  salary:25000
};

const reducer=(state=employeePersonalData,action)=>{
  switch(action.type){
    case 'INCREMENT':
      return {salary:state.salary + 1000};

    case 'DECREMENT':
      return {salary:state.salary - 1000};

    default:
      return state;
  }
}
const store=createStore(reducer);
---- In you component

  incrementSalary = () => {
    this.props.dispatch({type:'INCREMENT'});
  }

  decrementSalary = () => {
    this.props.dispatch({type:'DECREMENT'});
  }

  render() {
    return (
               <label>Employee Salary : <b>{this.props.salary}</b></label>
            </p>
          <button onClick={this.incrementSalary}>Increment</button>          
          <button onClick={this.decrementSalary}>Decrement</button>
)
 
function mapStateToProps(state){
    return{
        salary:state.salary
    };
}
export default connect(mapStateToProps)(Employee);
---
Redux Thunk
By default, Reduxâ€™s actions are dispatched synchronously, which is a problem for any non-trivial app that needs to 
communicate with an external API or perform side effects. Redux also allows for middleware that sits between an action being dispatched 
and the action reaching the reducers.

Redux store doesn't know anything about async logic. It only knows how to synchronously dispatch actions, 
update the state by calling the root reducer function, and notify the UI that something has changed

Redux Thunk is middleware that allows you to return functions, rather than just actions, within Redux. This allows for delayed actions, 
including working with promises.

One of the main use cases for this middleware is for handling actions that might not be synchronous, for example, using axios to send a GET request. 
Redux Thunk allows us to dispatch those actions asynchronously and resolve each promise that gets returned.

npm install redux-thunk --save

import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
//const thunk = ReduxThunk.default;
import rootReducer from './reducers/index';
import { composeWithDevTools } from 'redux-devtools-extension'

Option 1:

const composedEnhancer = composeWithDevTools(applyMiddleware(thunk))
const store = createStore(rootReducer, composedEnhancer)
export default store

Option 2:
const store = createStore(
  rootReducer,
  applyMiddleware(thunk)
);

Example 1:
const getUser = () => {
  return (dispatch) => {     //nameless functions
    // Initial action dispatched
    dispatch({ type: GET_CURRENT_USER });
    // Return promise with success and failure actions
    return axios.get('/api/auth/user').then(  
      user => dispatch({ type: GET_CURRENT_USER_SUCCESS, user }),
      err => dispatch({ type: GET_CURRENT_USER_FAILURE, err })
    );
  };
};

Example 2: Thunk function
export async function fetchTodos(dispatch, getState) {
  const response = await client.get('/fakeApi/todos')
  dispatch({ type: 'todos/todosLoaded', payload: response.todos })
}
---
Redux Saga
An intuitive Redux side effect manager. Easy to manage, easy to test, and executes efficiently.
Asynchronous
Composition-focused - Sagas enable numerous approaches to tackling parallel execution, task concurrency, task racing, task cancellation, and more. Keep total control over the flow of your code
Easy To Test - Assert results at each step of a generator or for a saga as a whole. Either way, side effect testing is quick, concise, and painless, as testing should be.

As any redux developer could tell you, the hardest part of building an app are asynchronous callsâ€Šâ€”â€Šhow do you handle network requests, timeouts, and other callbacks without complicating the redux actions and reducers?

In the context of Redux, a saga is implemented as a middleware (we canâ€™t use a reducer because this must be a pure function) to coordinate and trigger asynchronous actions (side-effects)
const {Provider, connect} = ReactRedux;
const {createStore, applyMiddleware} = Redux;
const createSagaMiddleware = ReduxSaga.default;
const {takeEvery, put, call} = ReduxSaga.effects;

//In addition to takeEvery, call, and put, redux-saga offers a lot of effect creators for throttling, getting the current state, 
//running tasks in parallel, and cancel tasks,

// Store
const sagaMiddleware = createSagaMiddleware();
const store = createStore(
  reducer,
  applyMiddleware(sagaMiddleware)
);
sagaMiddleware.run(watchFetchDog);

There are other alternatives to redux-saga that are worth trying. 
redux-observable (based on RxJS)  
redux-logic (also based on RxJS observables
https://redux-saga.js.org/docs/api/
https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71/

takeEvery(pattern, saga, ...args) - Spawns a saga on each action dispatched to the Store that matches pattern.
import { takeEvery } from `redux-saga/effects`
function* fetchUser(action) {
  ...
}
function* watchFetchUser() {
  yield takeEvery('USER_REQUESTED', fetchUser)
}
We use takeEvery to start a new fetchUser task on each dispatched USER_REQUESTED action
---
takeLatest(pattern, saga, ...args)# It automatically cancels any previous saga task started previously if it's still running.

put(action) - 
expect the store to be updated in the current stack frame (i.e. by the next line of code after yield put(action)) 
unless you have other Redux middlewares with asynchronous flows that delay the propagation of the action.

---
Exploring getState
On top of receiving the dispatch method from the state, the function returned by an asynchronous action creator with Redux 
Thunk also receives the storeâ€™s getState method, so that current store values can be read:

Example 1:
export const addTodo = ({ title, userId }) => {
  return (dispatch, getState) => {
    const { todos } = getState();
    if (todos.length > 4) return;
    dispatch(addTodoStarted());
  };
};
---
combineReducers
As your app grows more complex, you'll want to split your reducing function into separate functions, 
each managing independent parts of the state.

The combineReducers helper function turns an object whose values are different reducing functions into a single reducing function you can pass to createStore.

import { combineReducers } from 'redux'
import rdOne from './rdOne'
import rdTwo from './rdTwo'

export default combineReducers({
  rdOne,
  rdTwo
})

const store = createStore(reducer)
console.log(store.getState())

Example 1-
const rootReducer = combineReducers({
  theDefaultReducer,
  firstNamedReducer,
  secondNamedReducer
})

const store = createStore(rootReducer)
console.log(store.getState())

##########################################
// onEnter callback to validate authentication in private routes
const requireAuth = (nextState, replace) => {
  if (!auth.isAuthenticated()) {
    replace({ pathname: '/login' })
  }
}

const requireAdmin = (nextState, replace) => {
  if (!auth.isAuthenticated() || !auth.isAdmin()) {
    replace({ pathname: '/login' })
  }
}

export const makeMainRoutes = () => {
  return (
    <Route path="/" component={Container} auth={auth}>
      <IndexRedirect to="/home" />
      <Route path="home" component={Home} />
      <Route path="login" component={Login} />
      <Route path="profile" component={Profile} onEnter={requireAuth} />
      <Route path="instructor" component={Instructor} onEnter={requireAuth} />
      <Route path="instructor/new" component={NewInstructor} onEnter={requireAdmin} />
    </Route>
  )
}

###################
Start 08/06/21
https://github.com/LeeCheneler/react-app-template

import loadRouteOne from 'modules/RouteOne/index.bundle'
import loadRouteTwo from 'modules/RouteTwo/index.bundle'

const routes = [
  {
    title: 'Route One',
    path: '/route-one',
    load: loadRouteOne
  },
  {
    title: 'Route Two',
    path: '/route-two',
    load: loadRouteTwo
  }
]

export default routes

-------------

import React from 'react'
import { Route, Switch } from 'react-router'
import { Link } from 'react-router-dom'

import AsyncComponent from 'components/async/AsyncComponent'

import routes from './routes'

const App = () =>
  <div>
    <nav>
      <ul className="pl-o-list">
        {routes.map(route => (
          <li key={route.path} className="pl-o-list__item">
            <Link to={route.path}>{route.title}</Link>
          </li>
        ))}
      </ul>
    </nav>
    <Switch>
      {routes.map(route => (
        <Route
          key={route.path}
          path={route.path}
          component={props => <AsyncComponent {...props} load={route.load} />}
        />
      ))}
    </Switch>
  </div>

export default App
--------------------------------


import React from 'react'
import T from 'prop-types'

import AsyncBundle from 'components/async/AsyncBundle'

import Loading from 'components/common/Loading'

const AsyncComponent = props =>
  <AsyncBundle load={props.load} loadingComponent={Loading}>
    {Comp => <Comp {...props} />}
  </AsyncBundle>

AsyncComponent.propTypes = {
  load: T.func.isRequired
}

export default AsyncComponent

------

import React from 'react'
import T from 'prop-types'

class AsyncBundle extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      mod: null
    }
  }

  componentWillMount() {
    this.load(this.props)
  }

  componentWillReceiveProps(nextProps) {
    // Don't bother reloading if it's the same module
    if (nextProps.load !== this.props.load) {
      this.load(nextProps)
    }
  }

  load(props) {
    this.setState({
      mod: null
    })

    props.load((mod) => {
      this.setState({
        // Handle both es imports and cjs
        mod: mod.default || mod
      })
    })
  }

  render() {
    return this.state.mod
      ? this.props.children(this.state.mod)
      : this.props.loadingComponent()
  }
}

AsyncBundle.propTypes = {
  children: T.func.isRequired,
  load: T.func.isRequired,
  loadingComponent: T.func.isRequired
}

export default AsyncBundle

-----
END 08/06/21
