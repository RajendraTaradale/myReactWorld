
import React, { createContext } from 'react'
import ComB from "./ComB";
const BioData = createContext();
const ComA = () => {
    return (
        <BioData.Provider value={"Thapa Technical Subs"}>
            <ComB />
        </BioData.Provider>
    ) 
}
export default ComA
export { BioData };
 
}

export default ComB
----
import React, {useContext} from 'react'
import { BioData } from "./ComA";

const Comc = ({ name }) => {
    const channelName = useContext(BioData);
    return <h1>Hello ComC  { channelName } </h1>
}

export default 

###########################################################
Pass the Data from A to B component
<link to={{pathname:`/contact/${id}`, state: {data: props.data}}}
###########################################################

import axios from 'axios';

const instance = axios.create({
    baseURL: 'https://react-course-b798e-default-rtdb.firebaseio.com/',
});

instance.defaults.headers.common['Authorization'] = 'Auth From instance';

export default instance;
###########################################################
import { Component } from 'react';

export class ErrorBoundary extends Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }
    static getDerivedStateFromError() {
        console.log('get derived error fired');
        return { hasError: true };
    }

    componentDidCatch(error, info) {
        console.log(error);
        console.log(info);
        console.log('component did catch fired');
    }

    render() {
        if (this.state.hasError) {
            return <div>An Error occured</div>;
        }
        return this.props.children;
    }
}
---
  <ErrorBoundary>
  <App />                     
 </ErrorBoundary>
 
 ###########################################################

import React from 'react';

const UserContext = React.createContext();

export default UserContext;
---
import React from 'react';

const UserProfileContext = React.createContext();

export default UserProfileContext;
---
let userData = {
        name: 'Rajendra Taradale',
        greet: function () {
            return 'Hello ' + this.name;
        },
    };
    
<UserProfileContext.Provider value='Admin'>
<UserContext.Provider value={userData}>
    <App />
</UserContext.Provider>
</ButtonContext.Provider>
---

<div>
 <UserProfileContext.Consumer>
                    {(value) => {
                        return (
                            <div>
                                <a href='#'>{value}</a>
                                <UserContext.Consumer>
                                    {(userValue) => {
                                        return (
                                            <div>{userValue.gret()}</div>
                                        );
                                    }}
                                </UserContext.Consumer>
                            </div>
                        );
                    }}
                </UserProfileContext.Consumer>
            </div>
###########################################################

 <Link to={{  pathname: '/',hash: '#rajendra', search: '?channel=rajendra',   state: { admin: true }, }}  >  React Router  </Link>
 <NavLink to='/posts' activeClassName='text-white'> Posts </NavLink>
 ---
 import { BrowserRouter,  Route, HashRouter,  Switch,  Redirect } from 'react-router-dom';
import { lazy, Suspense } from 'react';

const About = lazy(() =>
    import(/* webpackChunkName: "About" */ './components/About/About'),
);

const Contact = lazy(() =>
    import(
        /* webpackChunkName: "Contact" */ './components/Contact/Contact'
    ),
);
const routeone = lazy(() => import('./components/routeone/routeones'));
const NotFound = lazy(() => import('./components/NotFound/NotFound'));

  <BrowserRouter>
            <Header />
            <div className='container mx-auto'>
                <div>
                    <Suspense fallback={<div>Loading....</div>}>
                        <Switch>
                            {isAuthenticate && (
                                <Route path='/about' component={About} />
                            )}

                            <Route path='/routeone' component={routeone} />
                            <Route path='/routeone' component={routeone} />

                            <Redirect from='/' to='/posts' exact />
                            <Route path='*' component={NotFound} />
                        </Switch>
                    </Suspense>
                </div>
                <Footer />
            </div>
        </BrowserRouter>
---
React Router v4
Using component
---
import { useParams } from 'react-router-dom'
const { handle } = useParams()

 const { userName } = this.props.match.params;
---
<Route path="/users/:id" component={UserPage}/> 
this.props.match.params.id
The component is automatically rendered with the route props.

Using render

<Route path="/users/:id" render={(props) => <UserPage {...props} />}/> 
this.props.match.params.id
Route props are passed to the render function.

---
const query = new URLSearchParams(this.props.location.search);
const token = query.get('token')
console.log(token)//1238999

npm i query-string
import queryString from 'query-string'
const value=queryString.parse(this.props.location.search);
const token=value.token;
console.log('token',token)//rajendr255066
----
import { useHistory } from 'react-router-dom';
const history = useHistory();
const handleClick = () => {
        history.push("/path/to/push");
 }
 ----
 this.props.history.push("/new/url");
----
this will navigate to a new location. The new location will override the current location in the history stack, like server-side redirects (HTTP 3xx) do.
import { Route, Redirect } from 'react-router'

<Route exact path="/" render={() => (
  loggedIn ? (
    <Redirect to="/dashboard"/>
  ) : (
    <MyHomePage/>
  )
)}/>

<Redirect to="/somewhere/else"/>
-----
const userauthentication={
  isLoggedIn:false,
  onAuthentication(){
    this.isLoggedIn=true;
  },
  getUserLogInStatus(){
    return this.isLoggedIn;
  }
}
--
function SecuredPathRoute(props){
  return(
    <Route path={props.path} render={data=>userauthentication.getUserLogInStatus()?(
      <props.component {...data}></props.component>):
      (<Redirect to={{pathname:'/'}}></Redirect>)}></Route>
  )
}

<Switch>
<Route exact path="/" component={LogIn}></Route>
<SecuredPathRoute  path="/data" component={data}></SecuredRoute>
<SecuredPathRoute  path="/datasecret" component={datas}></SecuredRoute>
</Switch>
###########################################################
this.mytextBox=React.createRef();
<input type="text" ref={this.quantityRef}></input>
componentDidMount(){
    this.mytextBox.current.focus();
}

###########################################################
import {createStore} from 'redux';
import {Provider} from 'react-redux';

const employeePersonalData={
  salary:25000
};

const reducer=(state=employeePersonalData,action)=>{
  switch(action.type){
    case 'INCREMENT':
      return {salary:state.salary + 1000};

    case 'DECREMENT':
      return {salary:state.salary - 1000};

    default:
      return state;
  }
}
const store=createStore(reducer);
---- In you component

  incrementSalary = () => {
    this.props.dispatch({type:'INCREMENT'});
  }

  decrementSalary = () => {
    this.props.dispatch({type:'DECREMENT'});
  }

  render() {
    return (
               <label>Employee Salary : <b>{this.props.salary}</b></label>
            </p>
          <button onClick={this.incrementSalary}>Increment</button>          
          <button onClick={this.decrementSalary}>Decrement</button>
)
 
function mapStateToProps(state){
    return{
        salary:state.salary
    };
}
export default connect(mapStateToProps)(Employee);

// onEnter callback to validate authentication in private routes
const requireAuth = (nextState, replace) => {
  if (!auth.isAuthenticated()) {
    replace({ pathname: '/login' })
  }
}

const requireAdmin = (nextState, replace) => {
  if (!auth.isAuthenticated() || !auth.isAdmin()) {
    replace({ pathname: '/login' })
  }
}

export const makeMainRoutes = () => {
  return (
    <Route path="/" component={Container} auth={auth}>
      <IndexRedirect to="/home" />
      <Route path="home" component={Home} />
      <Route path="login" component={Login} />
      <Route path="profile" component={Profile} onEnter={requireAuth} />
      <Route path="instructor" component={Instructor} onEnter={requireAuth} />
      <Route path="instructor/new" component={NewInstructor} onEnter={requireAdmin} />
    </Route>
  )
}


